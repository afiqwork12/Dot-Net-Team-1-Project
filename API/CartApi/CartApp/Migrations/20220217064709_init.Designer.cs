// <auto-generated />
using System;
using CarouselForBooksAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarouselForBooksAPI.Migrations
{
    [DbContext(typeof(CFBDBContext))]
    [Migration("20220217064709_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarouselForBooksAPI.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 22.199999999999999,
                            Description = "Description 1",
                            Language = "English",
                            Picture = "/images/book1.jpg",
                            Title = "Title 1"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 22.199999999999999,
                            Description = "Description 2",
                            Language = "English",
                            Picture = "/images/book2.jfif",
                            Title = "Title 2"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 22.199999999999999,
                            Description = "Description 3",
                            Language = "English",
                            Picture = "/images/book3.jpg",
                            Title = "Title 3"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 22.199999999999999,
                            Description = "Description 4",
                            Language = "English",
                            Picture = "/images/book4.jfif",
                            Title = "Title 4"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 22.199999999999999,
                            Description = "Description 5",
                            Language = "English",
                            Picture = "/images/book5.png",
                            Title = "Title 5"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 22.199999999999999,
                            Description = "Description 6",
                            Language = "English",
                            Picture = "/images/book6.jfif",
                            Title = "Title 6"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 22.199999999999999,
                            Description = "Description 7",
                            Language = "English",
                            Picture = "/images/book7.jpg",
                            Title = "Title 7"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 22.199999999999999,
                            Description = "Description 8",
                            Language = "English",
                            Picture = "/images/book8.jpg",
                            Title = "Title 8"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 22.199999999999999,
                            Description = "Description 9",
                            Language = "English",
                            Picture = "/images/book9.jpg",
                            Title = "Title 9"
                        });
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = 1
                        });
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.Cart", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookId", "Username");

                    b.HasIndex("Username");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nonfiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Action and adventure"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Alternate history"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Anthology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chick lit"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Classic"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Comic book"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Coming-of-age"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Fairytale"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Graphic novel"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical fiction"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Paranormal romance"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Picture book"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Political thriller"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Satire"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Short story"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Young adult"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Art/architecture"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Autobiography"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Business/economics"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Crafts/hobbies"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Cookbook"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Diary"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Dictionary"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Encyclopedia"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Guide"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Health/fitness"
                        },
                        new
                        {
                            Id = 42,
                            Name = "History"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Home and garden"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Journal"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Memoir"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Philosophy"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Prayer"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Religion, spirituality, and new age"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Textbook"
                        },
                        new
                        {
                            Id = 52,
                            Name = "True crime"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Review"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Self help"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Sports and leisure"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 58,
                            Name = "True crime"
                        });
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "john123",
                            Dob = new DateTime(2022, 2, 17, 14, 47, 9, 315, DateTimeKind.Local).AddTicks(6921),
                            Email = "john123@gmail.com",
                            Name = "John Wick",
                            Password = "P@ssw0rd123",
                            Role = "user"
                        });
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.BookGenre", b =>
                {
                    b.HasOne("CarouselForBooksAPI.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarouselForBooksAPI.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.Cart", b =>
                {
                    b.HasOne("CarouselForBooksAPI.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarouselForBooksAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.Order", b =>
                {
                    b.HasOne("CarouselForBooksAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Username");
                });

            modelBuilder.Entity("CarouselForBooksAPI.Models.OrderItem", b =>
                {
                    b.HasOne("CarouselForBooksAPI.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarouselForBooksAPI.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
